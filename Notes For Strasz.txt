Changes made to latest version of TestletBuilder:

Changes reflect the realization that I erred in previous implementations.  If my analysis is correct, my main mistake was not to view the ten questions being ordered (what in this latest version I call a TestletQuestionSet) as fixed.  In previous versions I wrote the TesletBuilder to randomly select items from a larger test bank and then order those random items according to the constraints, depending on the randomness of the selection for some of the ordering properties that needed to be enforced.  In this new version I pass a fixed question set into the ordering algorithm and achieve the ordering properties entirely inside the algorithm.  This new approach has led to some changes.

1) I no longer need to pass a TestBankRepository into the TestBuilder on construction, because the questions are selected outside the TestBuilder and passed to the ordering algorithm as an input parameter.  The TestBuilder no longer has access to the a TestBankRepository at all.  This eliminated the need altogether for ITestBankRepository and the dependency injection it facilitated.

2) I now pass a question set as a parameter to the AssembleTestlet method.  This set is determined outside the scope of the ordering algorithm; there is no specification for how it is selected other than that it consists of four pretest items and six operational items.  So now my unit tests choose these from the FakeTestBank and pass them into the System Under Test instead of their being selected inside the algorithm.  In each test I run the algorithm and subsequent assertions after choosing questions both randomly and sequentially to show that as far as the ordering algorithm is concerned it just accepts whatever set is given to it and still returns a testlet with all the desired properties regardless of how the incoming questions were selected.

3) FakeTestBank no longer implements ITestBankRepository.  It no longer needs to, as the TestBank is no longer injected into the TesBuilder as a construction parameter.

4) TestBuilder.CreateTestlet has now changed to accept a question set (it is expecting four pretest and six operational questions).  It now explictly randomizes the pretest questions before selecting two of them for the first two testlet questions.  It then combines the remaining two pretest with the six operational and randomizes the order of these before adding them to the testlet.  This is my current reading of what the algorithm is supposed to do.

5) I got rid of the TestBuilder method that assembled multiple tests (as well as the test that tested it).  Since the algorithm is no longer selecting questions, there is nothing the TestBuilder would be doing but receiving multiple question set inputs and running AssembleTestlet on each of them.  There would be no System Under Test behavior to be tested and such a method and test would be a waste of time. 

6) I also removed the NoConsecutivePretestItemsInLastEight test.  This was not part of the requirements and in order to pass consistently would have made me have to retry generating the last eight items until they were certain not to have included consecutive pretest items.  This might have interfered with the randomness of the process (and in any event, I'm not the one establishing the requirements).

7) I also removed the NoDuplicateItem test, since this was not part of the requirements either and the ordering algorithm no longer selects the items it is ordering.  Not likely, but conceivable that someone might have wanted to include duplicate items.

8) Added a check in TestBuilder.CreateTestlet to ensure the correct number of pretest and operational questions are being passed in and an exception type to throw if they are not.  Also four new unit tests to test too few and too many pretest and operational items.